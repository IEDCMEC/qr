generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model User {
  id                       String                     @id
  email                    String                     @unique
  firstName                String?
  lastName                 String?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  emailVerified            Boolean                    @default(false)
  phoneVerified            Boolean                    @default(false)
  OrganizationUser         OrganizationUser[]
  ParticipantCheckIn       ParticipantCheckIn[]
  ParticipantExtrasCheckIn ParticipantExtrasCheckIn[]
}

enum Role {
  USER
  ADMIN
  OWNER
}

model Organization {
  id                 String               @id
  name               String
  OrganizationUser   OrganizationUser[]
  Event              Event[]
  Participant        Participant[]
  ParticipantCheckin ParticipantCheckIn[]
  Attributes         Attributes[]
  Extras             Extras[]
  Registrant         Registrant[]
}

model OrganizationUser {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role           Role
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model Event {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  description        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  organizationId     String
  organization       Organization         @relation(fields: [organizationId], references: [id])
  Participant        Participant[]
  ParticipantCheckin ParticipantCheckIn[]
  attributes         Attributes[]
  extras             Extras[]
  registrant         Registrant[]
}

model Registrant {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName            String
  lastName             String?
  email                String
  phone                String?
  eventId              String                 @db.Uuid
  event                Event                  @relation(fields: [eventId], references: [id])
  organizationId       String
  organization         Organization           @relation(fields: [organizationId], references: [id])
  registrantAttributes RegistrantAttributes[]
  registrantExtras     RegistrantExtras[]
}

model Participant {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  firstName                String
  lastName                 String?
  email                    String
  phone                    String?
  checkInKey               String?
  eventId                  String                     @db.Uuid
  event                    Event                      @relation(fields: [eventId], references: [id])
  organizationId           String
  organization             Organization               @relation(fields: [organizationId], references: [id])
  participantCheckIn       ParticipantCheckIn[]
  participantAttributes    ParticipantAttributes[]
  participantExtras        ParticipantExtras[]
  participantExtrasCheckIn ParticipantExtrasCheckIn[]

  @@unique([email, eventId])
}

model ParticipantCheckIn {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  checkedInAt     DateTime
  checkedInBy     String
  checkedInByUser User         @relation(fields: [checkedInBy], references: [id])
  participantId   String       @db.Uuid
  participant     Participant  @relation(fields: [participantId], references: [id])
  eventId         String       @db.Uuid
  event           Event        @relation(fields: [eventId], references: [id])
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
}

model Attributes {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  organizationId        String
  organization          Organization            @relation(fields: [organizationId], references: [id])
  eventId               String                  @db.Uuid
  event                 Event                   @relation(fields: [eventId], references: [id])
  participantAttributes ParticipantAttributes[]
  registrantAttributes  RegistrantAttributes[]
}

model RegistrantAttributes {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  registrantId String     @db.Uuid
  registrant   Registrant @relation(fields: [registrantId], references: [id])
  attributeId  String     @db.Uuid
  attribute    Attributes @relation(fields: [attributeId], references: [id])
}

model ParticipantAttributes {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  participantId String      @db.Uuid
  participant   Participant @relation(fields: [participantId], references: [id])
  attributeId   String      @db.Uuid
  attribute     Attributes  @relation(fields: [attributeId], references: [id])
}

model Extras {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  organizationId           String
  organization             Organization               @relation(fields: [organizationId], references: [id])
  eventId                  String                     @db.Uuid
  event                    Event                      @relation(fields: [eventId], references: [id])
  participantExtras        ParticipantExtras[]
  participantExtrasCheckIn ParticipantExtrasCheckIn[]
  registrantExtras         RegistrantExtras[]
}

model RegistrantExtras {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  registrantId String     @db.Uuid
  registrant   Registrant @relation(fields: [registrantId], references: [id])
  extraId      String     @db.Uuid
  extra        Extras     @relation(fields: [extraId], references: [id])
}

model ParticipantExtras {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  participantId String      @db.Uuid
  participant   Participant @relation(fields: [participantId], references: [id])
  extraId       String      @db.Uuid
  extra         Extras      @relation(fields: [extraId], references: [id])
}

model ParticipantExtrasCheckIn {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  checkedInAt     DateTime
  checkedInBy     String
  checkedInByUser User        @relation(fields: [checkedInBy], references: [id])
  participantId   String      @db.Uuid
  participant     Participant @relation(fields: [participantId], references: [id])
  extra           Extras?     @relation(fields: [extraId], references: [id])
  extraId         String?     @db.Uuid
}
