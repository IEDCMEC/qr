generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model User {
  id                 String               @id
  email              String               @unique
  firstName          String?
  lastName           String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  emailVerified      Boolean              @default(false)
  phoneVerified      Boolean              @default(false)
  OrganizationUser   OrganizationUser[]
  ParticipantCheckIn ParticipantCheckIn[]
}

enum Role {
  USER
  ADMIN
  OWNER
}

model Organization {
  id                 String               @id
  name               String
  OrganizationUser   OrganizationUser[]
  Event              Event[]
  Participant        Participant[]
  ParticipantCheckin ParticipantCheckIn[]
}

model OrganizationUser {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role           Role
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model Event {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  description        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  organizationId     String
  organization       Organization         @relation(fields: [organizationId], references: [id])
  Participant        Participant[]
  ParticipantCheckin ParticipantCheckIn[]
}

model Participant {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  firstnName         String
  lastName           String?
  eventId            String               @db.Uuid
  event              Event                @relation(fields: [eventId], references: [id])
  organizationId     String
  organization       Organization         @relation(fields: [organizationId], references: [id])
  ParticipantCheckin ParticipantCheckIn[]
}

model ParticipantCheckIn {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  checkedInAt     DateTime
  checkedInBy     String
  checkedInByUser User         @relation(fields: [checkedInBy], references: [id])
  participantId   String       @db.Uuid
  participant     Participant  @relation(fields: [participantId], references: [id])
  eventId         String       @db.Uuid
  event           Event        @relation(fields: [eventId], references: [id])
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
}
